# worker_processes auto;

# events {
#     worker_connections 1024;
# }

# http {
#     include       mime.types;
#     default_type  application/octet-stream;
#     sendfile        on;
#     keepalive_timeout  65;

    # Define the backend servers for load balancing
    upstream applicant_service {
        server 192.168.5.142:5001 max_fails=1 fail_timeout=60s;  # Replace with actual backend server IP/host
        server 192.168.5.145:5001 max_fails=1 fail_timeout=60s;
        least_conn;  # Load balancing method (least connections)
    }

    # Define the backend servers for the arrival service (WeatherForecast API)
    upstream arrival_service {
        server 192.168.5.142:5002;
        server 192.168.5.145:5003 max_fails=1 fail_timeout=60s;
        server 192.168.5.142:6002 max_fails=1 fail_timeout=60s;
        least_conn;
    }

    # Define the backend servers for the Auth service with health check
    upstream auth_service {
        server 192.168.5.142:5003 max_fails=3 fail_timeout=30s; 
        server 192.168.5.145:5003 max_fails=1 fail_timeout=60s; 
        least_conn;
    }

    # Define the backend servers for the Departure service with health check
    upstream departure_service {
        server 192.168.5.142:5004 max_fails=3 fail_timeout=30s; 
        server 192.168.5.145:5004 max_fails=1 fail_timeout=60s; # Replace with the actual IP and port of the Departure service
        least_conn;
    }

    # Define the backend servers for the Sponsor service with health check
    upstream sponsor_service {
        server 192.168.5.142:5005 max_fails=3 fail_timeout=30s;  
        server 192.168.5.145:5005 max_fails=1 fail_timeout=60s;# Replace with the actual IP and port of the Sponsor service
        least_conn;
    }

    upstream commonHub_service {
        server 192.168.5.142:5006 max_fails=3 fail_timeout=30s;  
        server 192.168.5.145:5006 max_fails=1 fail_timeout=60s;# Replace with the actual IP and port of the Sponsor service
        least_conn;
    }

    proxy_connect_timeout 1s;
    proxy_read_timeout 2s;
    proxy_send_timeout 2s;

    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/m;  # 10 requests per second
   
#    server {
#     listen 80;
#     server_name 192.168.5.142;

#     # Redirect all HTTP traffic to HTTPS
#     return 301 https://$host$request_uri;
# }

    server {
        listen 80;
        server_name 192.168.5.142;
       
        # ssl_certificate /etc/nginx/ssl/server.crt;
        # ssl_certificate_key /etc/nginx/ssl/server.key;

        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;  # Allows bursting up to 20 requests

        # Wildcard route handling for API endpoints
        location ~* ^/api/v1/applicant.* {
            # allow 172.25.0.1;
            # deny all;
            proxy_pass http://applicant_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location ~* ^/WeatherForecast.* {
            proxy_pass http://arrival_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        } 

        # Departure Service Route Handling
        location ~* ^/api/Departure.* {
            proxy_pass http://departure_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
   
         location ~* ^/api/v1/auth.* {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }


        # Sponsor Service Route Handling
        location ~* ^/api/v1/sponsor.* {
            proxy_pass http://sponsor_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location ~* ^/api/v1/notes.* {
            proxy_pass http://commonHub_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        }
        # Health check for the Auth Service
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }

        # Error handling
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }


       
        error_page 429 = /429.html;
        location = /429.html {
            internal;
            default_type text/html;
            return 429 '<h1>Too Many Requests</h1><p>Please try again later.</p>';
        }

    }
#}
